tinymce.PluginManager.add("deflist",(function(t,e){t.hasPlugin("lists")||console.error("Please use the Lists plugin together with the Definition List plugin."),t.options.register("deflist_iconsize",{processor:"number",default:24});const i=t.options.get("deflist_iconsize"),n='<svg height="'+i+'" width="'+i+'" viewBox="0 0 100 100">  <rect fill="rgb(52,52,52)" stroke="none" x="8" y="12" width="60" height="9" rx="4"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="29" width="64" height="5" rx="2"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="41" width="64" height="5" rx="2"/>  <rect fill="rgb(52,52,52)" stroke="none" x="8" y="56" width="60" height="9" rx="4"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="73" width="64" height="5" rx="2"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="85" width="64" height="5" rx="2"/></svg>',r='<svg height="'+i+'" width="'+i+'" viewBox="0 0 100 100">  <rect fill="rgb(52,52,52)" stroke="none" x="8" y="12" width="60" height="9" rx="4"/>  <rect fill="rgb(192,192,192)" stroke="none" x="25" y="29" width="64" height="5" rx="2"/>  <rect fill="rgb(192,192,192)" stroke="none" x="25" y="41" width="64" height="5" rx="2"/>  <rect fill="rgb(52,52,52)" stroke="none" x="8" y="56" width="60" height="9" rx="4"/>  <rect fill="rgb(192,192,192)" stroke="none" x="25" y="73" width="64" height="5" rx="2"/>  <rect fill="rgb(192,192,192)" stroke="none" x="25" y="85" width="64" height="5" rx="2"/></svg>',s='<svg height="'+i+'" width="'+i+'" viewBox="0 0 100 100">  <rect fill="rgb(192,192,192)" stroke="none" x="8" y="12" width="60" height="9" rx="4"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="29" width="64" height="5" rx="2"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="41" width="64" height="5" rx="2"/>  <rect fill="rgb(192,192,192)" stroke="none" x="8" y="56" width="60" height="9" rx="4"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="73" width="64" height="5" rx="2"/>  <rect fill="rgb(52,52,52)" stroke="none" x="25" y="85" width="64" height="5" rx="2"/></svg>';t.options.register("deflist_icon",{processor:"string",default:n}),t.options.register("deflist_title_icon",{processor:"string",default:r}),t.options.register("deflist_descr_icon",{processor:"string",default:s});const o=t.options.get("deflist_icon"),l=t.options.get("deflist_title_icon"),h=t.options.get("deflist_descr_icon"),g=t=>!(t=>null==t)(t);class d{constructor(t,e){this.tag=t,this.value=e}static some(t){return new d(!0,t)}static none(){return d.singletonNone}fold(t,e){return this.tag?e(this.value):t()}isSome(){return this.tag}isNone(){return!this.tag}map(t){return this.tag?d.some(t(this.value)):d.none()}bind(t){return this.tag?t(this.value):d.none()}exists(t){return this.tag&&t(this.value)}forall(t){return!this.tag||t(this.value)}filter(t){return!this.tag||t(this.value)?this:d.none()}getOr(t){return this.tag?this.value:t}or(t){return this.tag?this:t}getOrThunk(t){return this.tag?this.value:t()}orThunk(t){return this.tag?this:t()}getOrDie(t){if(this.tag)return this.value;throw new Error(null!=t?t:"Called getOrDie on None")}static from(t){return g(t)?d.some(t):d.none()}getOrNull(){return this.tag?this.value:null}getOrUndefined(){return this.value}each(t){this.tag&&t(this.value)}toArray(){return this.tag?[this.value]:[]}toString(){return this.tag?`some(${this.value})`:"none()"}}d.singletonNone=new d(!1);const a=t=>e=>g(e)&&t.test(e.nodeName),c=a(/^(OL|UL|DL)$/),u=a(/^(TH|TD)$/),f=(t,e)=>((t,e,i)=>{for(let n=0,r=t.length;n<r;n++){const r=t[n];if(e(r,n))return d.some(r);if(i(r,n))break}return d.none()})(t,c,u).exists((t=>t.nodeName===e&&!(t=>/\btox\-/.test(t.className))(t))),x=(e,i)=>"<svg"===e.trim().substring(0,4).toLowerCase()?(t.ui.registry.addIcon(i,e),i):e,m=x(o,"_deflist_DL"),v=x(l,"_deflist_DT"),b=x(h,"_deflist_DD");t.ui.registry.addSplitButton("deflist",{tooltip:"Definition-list",icon:m,fetch:e=>{t.selection.getNode();e([{type:"choiceitem",value:"dt",icon:v,text:"Definition-list title",enabled:"DD"==t.selection.getNode().nodeName},{type:"choiceitem",value:"dd",icon:b,text:"Definition-list description",enabled:"DT"==t.selection.getNode().nodeName}])},onAction:t=>tinymce.activeEditor.execCommand("InsertDefinitionList",!1,{}),onItemAction:(t,e)=>{"dd"===e?tinymce.activeEditor.execCommand("Indent",!1,{}):tinymce.activeEditor.execCommand("Outdent",!1,{})},onSetup:((t,e)=>i=>(i.setEnabled(t.selection.isEditable()),((t,e)=>{const i=t.selection.getNode();return e({parents:t.dom.getParents(i),element:i}),t.on("NodeChange",e),()=>t.off("NodeChange",e)})(t,(n=>{i.setActive(f(n.parents,e)),i.setEnabled(!((t,e)=>{const i=t.dom.getParent(e,"ol,ul,dl");return((t,e)=>null!==e&&!t.dom.isEditable(e))(t,i)})(t,n.element)&&t.selection.isEditable())}))))(t,"DL")})})),tinymce.PluginManager.requireLangPack("deflist","de");